1、请你谈谈对volatile的理解
	是java虚拟机提供的轻量级的同步机制 有三个特性 保证可见性 不保证原子性 禁止指令重排
		
	JMM java memory model java内存模型 描述的是一组规则或规范
	JMM关于同步的规定
	1、线程解锁前 必须把共享变量的值刷新回主内存
	2、线程加锁前 必须读取主内存的最新值到自己的工作内存
	3、加锁解锁是用一把锁

	int a = 10;
	在主内存有个a=25的数据，
	三个线程来修改这个值，会把这个值拷贝到各自的工作内存(每个线程的私有数据区域)缓存起来
	t1把值改成30，写回主内存 a=30，t2,t3线程并不知道a已经修改，因此会造成数据的混乱
	
	双重加锁单例模式 没使用volatile的时候 可能出现问题
	private static SingletonDemo instance = null;
	private static volatile SingletonDemo instance = null;
	if(instance == null){
		synchronized(SingletonDemo.class){
			if(instance == null){
				instance = new SingletonDemo();
			}
		}
	}
	
	分析：对象的创建分布三步 2 3步可能重排序 就会拿到一个没初始化完成的对象
	1、分配内存空间
	2、初始化数据
	3、instance = 对象的指针指向这个引用

2、CAS是什么 比较并交换 如何保证数据的原子性的
	CAS的功能就是判断内存某个位置的值是否为预期值，如果是就更改为新值，否则不修改并返回false，这个过程是原子的
	Unsafe是CAS的核心类。java是无法访问底层系统的，需要通过本地(native)方法来访问,Unsafe相当于一个后门。基于
	该类可以直接操作特定的内存数据。Unsafe类在rt.jar sum.misc包中，其内部方法可以直接操作内存。Unsafe中类都是native修饰的
	CAS是一种系统原语，原语的执行必须是连续的不能被中断，也就是说CAS是一条CPU的原子指令，不会造成数据不一致问题
	public final int getAndIncrement() {
	   return unsafe.getAndAddInt(this, valueOffset, 1);
	}
	//var1 当前对象引用 var2 当前对象内存偏移量 var4 需要更新操作的值
	getAndAddInt(Object var1,long var2,int var4){
		int var5;
		do{
			//先获取该对象内存中的当前值
			var5=this.getIntVolatile(var1,var2);
			//操作时在获取一次值并判断是否和上一步获取的值是否一致 如果一致 更新值 否则继续执行循环
		}while(!this.compareAndSwapInt(var1,var2,var5,var5+var4));
		return var5;
	}
	valueOffset表示该变量值在内存中的偏移地址，Unsafe就是根据内存你的偏移地址获取数据的
	value用volatile修饰，保证了内存的可见性
	
CAS的缺点：
	1、如果CAS比较值失败，会一致尝试修改，可能给CPU带来很大压力
	2、只能保证一个共享变量的原子性
	3、引出来的ABA问题
	
CAS-->Unsafe-->CAS底层思想-->ABA-->原子引用更新-->如何规避ABA问题

3、AtomicInteger的ABA问题，原子引用更新是什么，如何规避ABA问题
	多个线程在执行操作的时候，t1线程执行速度快，t2线程执行慢，假如主内出初始值为A，t1初次操作把A改成B，然后又把B改成A，
	此时主内存的值是一样的，t2线程执行更新的时候，发现当前值和预期的值是一样的，就会执行修改成功，中间过程有改动，t1线程是不管的。
	如果业务只关注最终结果，那么是没什么问题的，如果关注中间的处理步骤，那么ABA将是个问题。
	
	原子引用是指只关心对象的引用是否一致，数据是否变更不关注。比如User u1 =new User("zsan"); User u2 = u1;u2.setName("lis");
	由于u2的引用和u1是指向同一块内存地址，所有会更新数据成功，即使u2的数据已经改动。AtomicReference
	
	可以通过加版本号的方式解决，如同数据库的乐观锁一样。每次改动加一个版本号，每次更新前，当前线程拥有的版本号小于实际版本号时 不执行更新。AtomicStampedReference

4、公平锁/非公平锁/可重入锁/递归锁/自旋锁的理解，并手写一个自旋锁。


5、CountDownLatch/CyclicBarrier/Semaphore 是什么
CountDownLatch：倒计时 所有线程都执行完之后 才执行主线程下的业务逻辑
	CountDownLatch countDownLatch = new CountDownLatch(5);
	for (int i = 1; i <= 5; i++) {
		new Thread(() -> {
			System.out.println(Thread.currentThread().getName() + "开始处理业务逻辑。。。");
			countDownLatch.countDown();
		}, CountEnum.getNameByCode(i)).start();
	}
	countDownLatch.await();
	System.out.println("所有业务执行完成在执行下面业务。。。");
	
CyclicBarrier：内存屏罩点 达到指定的次数后执行主线程或者指定的逻辑
	CyclicBarrier cyclicBarrier = new CyclicBarrier(7, () -> {
		System.out.println("cyclicBarrier other end then statr");
	});
	for (int i = 1; i <= 7; i++) {
		new Thread(() -> {
			System.out.println(Thread.currentThread().getName() + "开始执行...");
			try {cyclicBarrier.await();} catch (InterruptedException e) {e.printStackTrace();} catch (BrokenBarrierException e) {e.printStackTrace();}
		}, String.valueOf(i)).start();
	}

Semaphore：信号量主要用于两个目的 一个是多个共享资源的互斥，另一个用于并发线程数的控制
	Semaphore semaphore = new Semaphore(3);
	for (int i = 0; i < 6; i++) {
		new Thread(() -> {
			try {
				semaphore.acquire();
				System.out.println(Thread.currentThread().getName() + "抢到座位...");
				try {TimeUnit.SECONDS.sleep(2);} catch (InterruptedException e) {e.printStackTrace();}
				System.out.println(Thread.currentThread().getName() + "看完书离开");
			} catch (InterruptedException e) {
				e.printStackTrace();
			} finally {
				semaphore.release();
			}
		}, String.valueOf(i)).start();
	}

6、阻塞队列是什么，为什么用，有什么好处。队列是先进先出。
	1、当阻塞队列是空时，从队列中获取元素的操作将会被阻塞
	2、当阻塞队列是满时，往队列中添加元素的操作将会被阻塞
	在多线程领域，所谓阻塞，在某些情况下会挂起线程即阻塞，一单满足条件，被挂起的线程又会被唤醒。
	好处是我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为BlockingQueue都给你实现了
ArrayBlockingQueue：由数组结构组成的有界阻塞队列
LinkedBlockingQueue：由链表结构组成的有界阻塞队列，默认无限大
PriorityBlockingQueue：支持优先级排序的无线阻塞队列
DelayQueue：使用优先级队列实现的延迟无界阻塞队列
SynchronousQueue：不存储元素的阻塞队列，也即单个元素的队列
LinkedTransferQueue：由列表结构组成的无界阻塞队列
LinkedBlockingDeque：由链表结构组成的双向阻塞队列

插入方法：
	//add(E) 元素满后 抛出异常 java.lang.IllegalStateException: Queue full
	//put(E) 元素满后 一直阻塞
	//offer(E) 元素满后 返回false,否则返回true
	//offer(E) 在该队列的尾部插入指定的元素，等待指定的等待时间，以使空间在队列已满时变为可用。
移除方法：
	//remove() 当队列没有数据时，报错 java.util.NoSuchElementException
	//take() 当队列没有数据时，一直阻塞
	//poll() 当队列没有数据时，返回null
	//poll(,TimeUnit.SECONDS) 检索并删除此队列的头，等待指定的等待时间（如有必要）使元素变为可用。
检索方法：
	//element() 检索但不删除由此deque表示的队列的头部（换句话说，该deque的第一个元素）。没有元素：java.util.NoSuchElementException
	//peek() 检索但不删除由此deque表示的队列的头部（换句话说，该deque的第一个元素），如果此deque为空，则返回 null 。 
        

7、synchronized和lock的区别，用lock有什么好处，举例说说
	1、synchronized是关键字属于jvm层面 底层通过 monitorenter  monitorexit实现
	   lock是具体类是javaAPI
	2、synchronized不需要手动去释放锁，当代码执行完之后系统会自动让线程释放对锁的占有
		lock需要手动释放锁，若没有主动释放锁，就可能造成死锁现象。lock()和unlock()为一组
	3、synchronized是不可中断的，除非排除异常或者正常运行完成
		lock可以中断
	4、synchronized非公平锁
		lock默认非公平锁，可以在构造函数中指定，支持公平锁
	5、synchronized没有condition，通过notify()唤醒
		lock用来实现分组唤醒需要唤醒的线程，可以精确唤醒，而不是synchronized要么随机唤醒一个线程或者全部唤醒
	
8、Runnable和Callable的区别
	1、callable是juc包下的接口,支持泛型
	2、方法名是call，后跟异常
	3、带返回参数
	
9、用过线程池么，谈谈你的理解？
	1、为什么用线程池，优势在哪里
	线程池的工作主要是控制运行的线程的数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果
		线程数量超过了最大数量的线程排队等候，等其他线程执行完毕，再从队列中取出来执行
	主要特点：线程复用，控制最大并发数，管理线程
	1.1、降低资源消耗、通过重复利用创建的线程降低线程的创建和销毁造成的消耗
	1.2、提高响应速度、当任务达到时，任务不需要等到线程创建就能执行
	1.3、提供线程的可管理性、线程时稀缺资源，如果无限制的创建，不会回消耗系统资源，还会降低系统的稳定性、
		使用线程池可以进行统一的分配，调优和监控
	2、线程池如何使用
	3、线程池的几个重要参数介绍
	ThreadPoolExecutor(
		int corePoolSize,线程池中的常驻核心线程数
		int maximumPoolSize,线程池能够容纳同时执行的最大线程数，此值必须大于等于1
		long keepAliveTime,多余的空闲线程的存货时间。当前线程池数量超过corePoolSize时当空闲时间达到该值时，
		多余的空闲线程会被销毁直到只剩下corePoolSize个线程为止
		TimeUnit unit,keepAliveTime的单位
		BlockingQueue<Runnable> workQueue,任务队列 被提交但尚未执行的任务
		ThreadFactory threadFactory,表示生成线程池中工作线程的线程工厂,默认的即可
		RejectedExecutionHandler handler 拒绝策略，表示当队列满了并且工作线程数量等于线程池的最大线程数时
			四种拒绝策略：
			1、AbortPolicy(默认) 直接抛出RejectedExecutionException异常阻止系统正常运行
			2、CallerRunsPolicy 调运者运行一种调节机制，该策略不会抛弃任务也不抛出异常，而是将某些任务回退到调用者
			3、DiscardPolicy 抛弃队列中等待最久的任务，然后把当前任务加入到队列中尝试再次提交当前任务
			4、DiscardOldestPolicy 直接丢弃任务，不予任何处理也不抛出异常。如果允许任务丢失这是最好的一种方案
	)
							  
	4、说说线程池的底层工作原理
	
10、死锁编码及定位分析
	死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象。无外力干涉那么它们将无法进行。
	分析:
	jps 获取死锁的进程ID
	jstack 进程ID 显示具体的错误信息
	
	
11、JVM内存结构图
	堆区域分为：新生代 老年代 持久代（jdk1.8后去除该区域）引入元空间(使用的是本地内存空间)
		新生代分为 eden survivor(from to)三个区域 默认比8:1:1 垃圾回收15次后放入老年代 这个阈值可配置
	方法区 java栈 本地方法栈 程序计数器

12、JVM垃圾回收的时候如何确定垃圾？是否知道什么是GC Roots
	简单的说就是内存中已经不再被使用到的空间就是垃圾，通过引用计数法(无法解决循环依赖问题，已不使用)或者枚举跟节点做可达性分析确认
	GCRoots：基本思路就是用过一系列名为GCRoots的对象作为起始点，从这个被称为GCRoots的对象开始向下搜索，如果一个对象到GCRoots
	没有任务引用链相连时，则说明此对象不可用。给定一个集合的引用作为跟节点出发，通过引用关系遍历对象图，
	能被遍历到的对象就被判定为存活，没有被遍历到的就被判定为死亡
	
	哪些可以作为GCRoots对象：
		1、虚拟机栈中引用的对象、
		2、方法区中的类静态属性引用的对象、
		3、方法区中常量引用的对象、
		4、本地方法栈中JNI(Native方法)引用的对象

13、jv调优和参数配置，请问如何盘点查看JVM系统默认值
	jvm参数类型：标配参数 X参数 XX参数(重要)
	标配参数：-version -help -java showversion
	X参数：-Xint 解释执行 -Xcomp 第一次使用就编译成本地代码 -Xmixed 混合模式
	XX参数(重要)：
		boolean类型：-XX:+PrintGCDetails  + 开启 - 不开启
			查看jvm默认设置的值：jinfo -flag PrintGCDetails 79948
		kv设置类型：-XX:属性key=属性值
			查看jvm默认设置的值：jinfo -flag MetaspaceSize 79948

		jinfo -flags 86772 查看所有的配置参数 包括jvm默认的 以及自己修改后的
		Non-default VM flags: 
		-XX:CICompilerCount=3 
		-XX:InitialHeapSize=268435456 等价 -Xms 初始堆大小
		-XX:MaxHeapSize=4271898624 等价 -Xmx 最大堆大小
		-XX:MaxNewSize=1423966208 
		-XX:MinHeapDeltaBytes=524288 
		-XX:NewSize=89128960 
		-XX:OldSize=179306496 
		-XX:+UseCompressedClassPointers 
		-XX:+UseCompressedOops 
		-XX:+UseFastUnorderedTimeStamps 
		-XX:-UseLargePagesIndividualAllocation 
		-XX:+UseParallelGC
		//查看所有jvm参数
		java -XX:+PrintFlagsFinal -version
		= 初始的  ：= 人为改过或者jvm自动改过后的
		java -XX:+PrintFlagsFinal -XX:MetaspaceSize=512M javaclassname
		//查看所有jvm参数 垃圾回收默认的回收机制
		java -XX:+PrintCommandLineFlags -version

		JAVA8后永久代被移除，被元空间的区域取代，元空间的本质和永久代类似。
		两者最大的不同在于，永久代使用的是JVM堆内存，java8的元空间并不在虚拟机中而是使用本机物理内存
		元空间大小受本地内存限制，类的元数据放入本地内存，字符串池和类的静态变量放入堆中，这类可以加载多少类的
		元数据就在不由MapPermSize控制，而由系统的实际可用空间来控制。
		
		常用参数：
		-Xms 初始堆内存 默认物理内存的1/64 等价于-XX:InitialHeapSize
		-Xmx 最大堆内存 默认物理内存的1/4 等价于-XX:MaxHeapSize
		-Xss 设置单个线程栈的大小，一般默认为512k*1024k 等价-XX:ThreadStackSize 需注意 依赖平台 linux等64位系统平台默认1024kb ,windows中默认值依赖虚拟内存
		-Xmn 设置年轻代大小
		-XX:MetaspaceSize 设置元空间大小
		-XX:+PrintGCDetails 打印GC详细 规律：GC前内存大小->GC后内存占用(该区域内存总大小)
			[GC (Allocation Failure) [PSYoungGen: 1932K->488K(2560K)] 1932K->680K(9728K), 0.0525741 secs] [Times: user=0.00 sys=0.00, real=0.05 secs] 
			[GC (Allocation Failure) [PSYoungGen: 488K->488K(2560K)] 680K->688K(9728K), 0.0388777 secs] [Times: user=0.00 sys=0.00, real=0.04 secs] 
			[Full GC (Allocation Failure) [PSYoungGen: 488K->0K(2560K)] [ParOldGen: 200K->652K(7168K)] 688K->652K(9728K), [Metaspace: 3440K->3440K(1056768K)], 0.0053123 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
			[GC (Allocation Failure) [PSYoungGen: 0K->0K(2560K)] 652K->652K(9728K), 0.0002624 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
			[Full GC (Allocation Failure) [PSYoungGen: 0K->0K(2560K)] [ParOldGen: 652K->634K(7168K)] 652K->634K(9728K), [Metaspace: 3440K->3440K(1056768K)], 0.0085474 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] 
			Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
				at com.wdcm.jvm.gc.GcDemo.main(GcDemo.java:14)
		-XX:SurvivorRatio=n 年轻代中eden区与两个Survivor区的比值 默认8:1:1 如为3，表示Eden:Survicor=3:2 Eden:S0:S1=3:1:1 
		-XX:NewRatio=n 设置年轻代和年老代的比值 默认=2 如为3 表示年轻代和年老代比值为1:3
		-XX:MaxTenuringThreshold=n 设置垃圾回收最大年龄 n 0-15之间 否则运行期间报错。

14、强引用、软引用、弱引用、虚引用分别是什么
	强引用：当内存不足jvm开始回收垃圾，对于强引用的对象，就算出现OOM也不会对该对象进行回收。
        Object o1 = new Object(); Object o2 = o1;
        o1 = null; System.gc();
        System.out.println(o2); //o2对象还存在 没被回收
	软引用：软引用是一种相对引用弱化了一些的引用，需要用java.lang.ref.SoftReference类实现，可以让
		对象豁免一些垃圾收集。当系统内存充足时，不会回收，内存不足时，会回收。软引用通常用在对内存敏感的程序中，比如高速缓存就用到软引用。
	弱引用：弱引用需要用java.lang.ref。WeakReference类来实现，它比软引用的生存期更短。只要垃圾回收机制一运行，不管jvm内存是否足够，都会回收该对象占用的内存
	虚引用：
	
	
15、请谈谈你对OOM的认识




	
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
List集合回顾：
					interface list
	abstract AbstractList			AbstractSequentialList
Vector				ArrayList			LinkedList
Vector是线程安全的，add用synchronized修饰 并发性能不好 构造函数中定义：capacityIncrement

	Vector底层依赖数组来实现，查询效率较高，增删效率较低
	Vector中的元素有序、可重复、允许null值，添加单个元素的话，只能添加到集合末尾
	Vector会自动进行扩容。扩容后的容量由增量来决定，（2倍 or 原容量+增量）
	大多数方法用关键字synchronized修饰，线程安全。

ArrayList是线程不安全的，没有使用锁机制保证 并发性能高

	ArrayList底层依赖数组来实现，查询效率较高，增删效率较低
	ArrayList中的元素有序、可重复、允许null值
	ArrayList会自动进行扩容1.5倍。初始化时尽量指定初始容量，可避免频繁扩容，影响程序执行效率
	线程不安全，适用于单线程环境。
	
LinkedList线程不安全

	LinkedList底层依赖双向循环链表实现，增删效率较高，查询效率较低
	LinkedList中的元素有序、可重复、允许null值
	线程不安全，适用于单线程环境。

1、Vector和ArrayList使用的是数据结构，所以方便查询：Object[] elementData
2、插入元素的执行逻辑
	 >> 1  二进制数往右移一位,高位补0 10的二进制是1010 左移一位后为0101 十进制为5
	 << 1 同上相反
	1、如果当前容器为空，默认容器大小为10
	2、如果容器不为空且元素size>10了 需要扩容，oldCapacity >> 1 及扩容当前容量的一半。
	3、Arrays.copyOf方法复制一份并指向当前数据的引用。
public boolean add(E e) {
	ensureCapacityInternal(size + 1); //初始化容器大小
	elementData[size++] = e;
	return true;
}
private void ensureCapacityInternal(int minCapacity) {
	ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));
}
private static int calculateCapacity(Object[] elementData, int minCapacity) {
	if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
		return Math.max(DEFAULT_CAPACITY, minCapacity);
	}
	return minCapacity;
}
private void ensureExplicitCapacity(int minCapacity) {
	modCount++;

	// overflow-conscious code
	if (minCapacity - elementData.length > 0)
		grow(minCapacity);
}
private void grow(int minCapacity) {
	// overflow-conscious code
	int oldCapacity = elementData.length;
	int newCapacity = oldCapacity + (oldCapacity >> 1);
	if (newCapacity - minCapacity < 0)
		newCapacity = minCapacity;
	if (newCapacity - MAX_ARRAY_SIZE > 0)
		newCapacity = hugeCapacity(minCapacity);
	// minCapacity is usually close to size, so this is a win:
	elementData = Arrays.copyOf(elementData, newCapacity);
}

ArrayList线程不安全的写法：多线程下才会出现 java.util.ConcurrentModificationException
List<String> arrayList = new ArrayList();
for (int i = 0; i < 300; i++) {
	new Thread(() -> {
		arrayList.add(UUID.randomUUID().toString().substring(0, 5));
		System.out.println(Thread.currentThread().getName() + " end list = " + arrayList);
	}).start();
}
解决方案：
1、new Vector() //synchronized 方法体 扩容增量+1
2、Collections.synchronizedList(new ArrayList<>());
3、new CopyOnWriteArrayList<>() 通过ReentrantLock 重入锁实现 基于复制的副本进行操作然后把新的副本数据指向原先的引用。扩容增量+1

Set集合回顾：
		interface set
HashSet		TreeSet		Tree
	Set集合是线程不安全的
	如果我们不需要保留存储顺序, 并且需要去掉重复元素, 使用Set.
	如果我们需要将元素排序, 那么使用TreeSet
	如果我们不需要排序, 使用HashSet, HashSet比TreeSet效率高.
	如果我们需要保留存储顺序, 又要过滤重复元素, 那么使用LinkedHashSet

要保证多线程环境下Set集合操作安全，javaAPI提供了两种方式
1、Collections.synchronizedSet(new HashSet<>());
2、new CopyOnWriteArraySet<>();

HashSet
	内部是一个HashMap map = new HashMap<>(); 当前值就是key，value是一个静态常量Object对象 map.put(e, PRESENT)==null; static final Object PRESENT = new Object();

TreeSet
	内部是一个TreeMap this(new TreeMap<E,Object>());当前值就是key，value是一个静态常量Object对象 map.put(e, PRESENT)==null;
	
LinkedHashSet	
	内部使用的是LinkedHashMap map = new LinkedHashMap<>(initialCapacity 16, loadFactor 0.75f); 
	
Map集合回顾：
				interface map
HashMap		LinkedHashMap	TreeMap 	Hashtable

Hashtable是线程安全的，通过synchronized修饰方法体保证
HashMap、LinkedHashMap、TreeMap是分线程安全的，javaAPI提供了两种方式
1、Collections.synchronizedMap(new HashMap<>());
2、new ConcurrentHashMap();

HashMap数据结构：
JDK1.7:数组+链表
JDK1.8:数组+链表+红黑树
默认输出容量：DEFAULT_INITIAL_CAPACITY = 1 << 4	16
为什么必须为2的N次方：1、方便&运算 2、为了扩容之后整体的移动
加载因子：DEFAULT_LOAD_FACTOR = 0.75f;时间与空间的一个折中值
列表转红黑树的阈值：TREEIFY_THRESHOLD = 8;
红黑树转列表的阈值：UNTREEIFY_THRESHOLD = 6;
转红黑树的条件：MIN_TREEIFY_CAPACITY = 64;

put解析：
hash(key):扰动函数 return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); 散列尽可能的均匀分布
Node<K,V>[] resize() Initializes or doubles table size
创建一个容量为16的Node数据	
Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];	
与(&)运算比取模(%)运算快很多
1.7是头插法 1.8尾插法

i++
iconst_0  //把数值0 push到操作数栈  操作数据栈=0
istore_1  //把操作数栈写回到本地变量第2个位置 本地变量=0 操作数据栈为空
iload_1   //把本地变量第2个位置的值push到操作数栈 本地变量和操作数据栈都为0
iinc 1,1  //把本地变量表第2个位置加1 本地变量+1=1    
istore_1  //把操作数据栈写回本地变量第2个位置 操作数据栈0写回本地变量=0
return    // 返回结果为0

++i
0: iconst_0		//把数值0 push到操作数栈  操作数据栈=0
1: istore_1		//把操作数栈写回到本地变量第2个位置 本地变量=0 操作数据栈为空
2: iinc 1, 1	//把本地变量表第2个位置加1 本地变量+1=1    
5: iload_1		//把本地变量第2个位置的值push到操作数栈 本地变量和操作数据栈都为1
6: istore_1		//把操作数据栈写回本地变量第2个位置 操作数据栈1写回本地变量=1
7: return		// 返回结果为1

java中 ^ 是什么意思
按位异或运算符(^)是二元运算符，要化为二进制才能进行计算，在两个操作数中，如果两个相应的位相同，则运算结果为0，否则1；例如：
int a=15；
int b=a^8;
运算结果为：a=15；b=7；
a（二进制）=1111；8（二进制）=1000；1111^1000=0111;er 0111=7(十进制）；

7&3 ： 0111&0011 执行结果为 ： 0011

for (Entry<K,V> e : table) {
	while(null != e) {
		Entry<K,V> next = e.next;              //注释1
		if (rehash) {
			e.hash = null == e.key ? 0 : hash(e.key);
		}
		int i = indexFor(e.hash, newCapacity); //注释2
		e.next = newTable[i];                  //注释3
		newTable[i] = e;                       //注释4
		e = next;                              //注释5
	}
}
			
			
-----------------------------------------------------------------------------------------------------------------------------------------------------
AVL树是平衡二叉树，他的左右子树高度之差不超过1

红黑树的性质：
（1）节点是要么红色或要么是黑色。
（2）根一定是黑色节点。
（3）每个叶子节点都带有两个空的黑色节点（称之为NIL节点，它又被称为黑哨兵）。
（4）每个红色节点的两个子节点都是黑色（或者说从每个叶子到根的所有路径上不能有两个连续的红色节点）。
（5）从任一节点到它所能到达得叶子节点的所有简单路径都包含相同数目的黑色节点。

红黑树的三种变换规则
1、改变颜色 红变黑 黑变红
2、左旋，针对于点旋，但是点上面的子树也要跟着转
3‘右旋

旋转和颜色变换规则：所有插入的点默认红色
1、变颜色的情况：当前节点的父亲是红色，且它的祖父节点的另一个子节点也是红色(叔叔节点)
(1)把父节点设置为黑色
(1)把叔叔节点也设为黑色
(1)把祖父也就是父亲的父亲节点设为红色
(1)把指针定义到祖父节点设为当前要操作的分析的点变换的规则
2、左旋。当前父节点是红色，叔叔是黑色的时候，且当前节点是右子树。左旋，以父节点作为左旋
3、右旋：当前父节点是红色，叔叔节点是黑色的时候，且当前节点是左子树，右旋
(1)把父节点变为黑色
(1)把祖父节点变为红色
(1)以祖父节点旋转


递归+回溯就已经是dfs(深度优先搜索)








	
	
	